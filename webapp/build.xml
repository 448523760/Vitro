<?xml version="1.0" encoding="UTF-8"?>

<!-- $This file is distributed under the terms of the license in /doc/license.txt$ -->

<!-- ====================================================================== 
     Build script for the Vitro core webapp.
     
     This can be used on its own, or included into a Product build script.
                          
     jeb228                                                                
     ====================================================================== -->

<project name="vitroCore" default="describe">

	<!-- 
	 If file paths are based on this, they will work, regardless of whether this 
	 script is run on its own or included into a Product build script.
	 -->
	<dirname property="vitroCore.basedir" file="${ant.file.vitroCore}" />

	<property file="${vitroCore.basedir}/build.properties" />

	<!-- - - - - - - - - - - - - - - - - - 
          paths: for compiling and running                      
         - - - - - - - - - - - - - - - - - -->
	<path id="compile.classpath">
		<fileset dir="${library.dir}">
			<include name="**/*.jar" />
		</fileset>
	</path>

	<path id="test.compile.classpath">
		<pathelement location="${classes.dir}" />
		<path refid="compile.classpath" />
	</path>

	<path id="test.run.classpath">
		<!-- To get the data files and the correct log4j.properties, this comes before classes.dir -->
		<pathelement location="${test.source.dir}" />

		<pathelement location="${test.classes.dir}" />
		<path refid="test.compile.classpath" />
	</path>


	<!-- ================================= 
          target: describe              
         ================================= -->
	<target name="describe" description="--> The default target.">
		<echo>
all      - Runs "clean", then "deploy".
clean    - Delete all artifacts so the next build will be from scratch.
compile  - Compile the Java source files.
test     - Compile and run the JUnit tests.
war      - Assemble everything into a deployable WAR file.
deploy   - Deploy the application directly into the Tomcat webapps directory.
	    </echo>
	</target>

	<!-- ================================= 
          target: all              
         ================================= -->
	<target name="all" depends="clean, deploy" description="Run 'clean', then 'deploy'" />

	<!-- ================================= 
          target: clean              
         ================================= -->
	<target name="clean" description="--> Delete all artifacts.">
		<delete dir="${build.dir}" />
	</target>

	<!-- - - - - - - - - - - - - - - - - - 
          target: properties                      
         - - - - - - - - - - - - - - - - - -->
	<target name="properties">
		<!--
			If calling from a Product build script, then this property
			already points to the deploy.properties file of the Product. 
		-->
		<property name="deploy.properties.file" location="config/deploy.properties" />

		<fail message="You must create a &quot;${deploy.properties.file}&quot; file.">
			<condition>
				<not>
					<available file="${deploy.properties.file}" />
				</not>
			</condition>
		</fail>

		<property file="${deploy.properties.file}" />

		<fail unless="tomcat.home"
		      message="${deploy.properties.file} must contain a value for tomcat.home" />
		<fail unless="webapp.name"
		      message="${deploy.properties.file} must contain a value for webapp.name" />
		<fail unless="upload.directory"
		      message="${deploy.properties.file} must contain a value for upload.directory" />
		<fail unless="LuceneSetup.indexDir"
		      message="${deploy.properties.file} must contain a value for LuceneSetup.indexDir" />
		<fail unless="Vitro.defaultNamespace"
		      message="${deploy.properties.file} must contain a value for Vitro.defaultNamespace" />
		<fail unless="Vitro.smtpHost"
		      message="${deploy.properties.file} must contain a value for Vitro.smtpHost (may be empty)" />
		<fail unless="VitroConnection.DataSource.url"
		      message="${deploy.properties.file} must contain a value for VitroConnection.DataSource.url" />
		<fail unless="VitroConnection.DataSource.username"
		      message="${deploy.properties.file} must contain a value for VitroConnection.DataSource.username" />
		<fail unless="VitroConnection.DataSource.password"
		      message="${deploy.properties.file} must contain a value for VitroConnection.DataSource.password" />
		<fail unless="initialAdminUser"
		      message="${deploy.properties.file} must contain a value for initialAdminUser" />

	</target>

	<!-- - - - - - - - - - - - - - - - - - 
          target: prepare                      
         - - - - - - - - - - - - - - - - - -->
	<target name="prepare" depends="properties">
		<mkdir dir="${build.dir}" />
		<mkdir dir="${classes.dir}" />
		<mkdir dir="${test.classes.dir}" />
	</target>

	<!-- ================================= 
          target: compile              
         ================================= -->
	<target name="compile" depends="prepare" description="Compile Java sources">
		<!-- deletes all files that depend on changed .java files -->
		<depend srcdir="${source.dir}"
		        destdir="${classes.dir}"
		        closure="false"
		        cache="${build.dir}/.depcache">
			<classpath refid="compile.classpath" />
		</depend>

		<javac srcdir="${source.dir}"
		       destdir="${classes.dir}"
		       debug="true"
		       deprecation="true"
		       optimize="true"
		       source="1.5">
			<classpath refid="compile.classpath" />
		</javac>
	</target>

	<!-- ================================= 
          target: test              
         ================================= -->
	<target name="test" depends="compile" description="Run JUnit tests">
		<javac srcdir="${test.source.dir}"
		       destdir="${test.classes.dir}"
		       debug="true"
		       deprecation="true"
		       optimize="false"
		       source="1.5">
			<classpath refid="test.compile.classpath" />
		</javac>

		<java classname="edu.cornell.mannlib.vitro.testing.VitroTestRunner"
		      fork="yes"
		      failonerror="true">
			<classpath refid="test.run.classpath" />
			<arg file="${test.source.dir}" />
			<arg value="${testlevel}" />
		</java>
	</target>

	<!-- - - - - - - - - - - - - - - - - - 
          target: copyEtc                      
         - - - - - - - - - - - - - - - - - -->
	<target name="copyEtc" depends="test">
		<copy todir="${build.war.dir}">
			<fileset dir="${web.dir}">
				<!--
					If a product doesn't want the core themes, it can
					set this property and they will be skipped. 
				-->
				<exclude name="themes/**/*" if="skip.core.themes" />
			</fileset>
		</copy>

		<copy todir="${build.war.dir}/WEB-INF">
			<fileset file="${config.dir}/web.xml" />
			<fileset file="${config.dir}/dwr.xml" />
		</copy>

		<copy file="${config.dir}/default.log4j.properties"
		      tofile="${build.war.dir}/WEB-INF/classes/log4j.properties"
		      filtering="true">
			<filterchain>
				<expandproperties />
			</filterchain>
		</copy>

		<!-- TODO: Have the Jena code read the userId directly from the deploy.properties -->
		<copy file="${vitroCore.basedir}/ontologies/auth/example.vitroUsers.owl"
		      tofile="${build.war.dir}/WEB-INF/ontologies/auth/vitroUsers.owl"
		      filtering="true">
			<filterchain>
				<expandproperties />
			</filterchain>
		</copy>
		<!-- TODO: Have the Jena code read the userId directly from the deploy.properties -->

		<copy todir="${build.war.dir}/WEB-INF/classes">
			<fileset file="${config.dir}/deploy.properties" />
		</copy>

		<copy todir="${build.war.dir}/WEB-INF/tlds">
			<fileset dir="${webapp.dir}/config/tlds" includes="**/*" excludes="*.LCK" />
		</copy>

		<!-- TODO Get rid of these webservices files -->
		<copy todir="${build.war.dir}/WEB-INF/lib">
			<fileset dir="${vitroCore.basedir}/../services/lib" includes="**/*" excludes="*.LCK" />
		</copy>
		<copy todir="${build.war.dir}">
			<fileset dir="${vitroCore.basedir}/../services/additions" includes="**/*" />
		</copy>
		<!-- TODO Get rid of these webservices files -->

		<!-- TODO: These aren't needed in the core -->
		<copy todir="${build.war.dir}/WEB-INF/ontologies">
			<fileset dir="${ontologies.dir}" />
		</copy>
		<copy todir="${build.war.dir}/WEB-INF/submodels" failonerror="false">
			<fileset dir="${webapp.dir}/model/submodels" />
		</copy>
		<copy todir="${build.war.dir}/WEB-INF/init-data" failonerror="false">
			<fileset dir="${webapp.dir}/model/init-data" />
		</copy>
		<!-- TODO: These aren't needed in the core -->

		<!-- xml files from src tree -->
		<copy todir="${build.war.dir}/WEB-INF/classes">
			<fileset dir="${webapp.dir}/src" includes="**/*.xml" />
		</copy>

		<copy todir="${build.war.dir}/WEB-INF/lib">
			<fileset dir="${library.dir}">
				<!-- these are already in Tomcat: we shouldn't conflict. -->
				<exclude name="jsp-api.jar" />
				<exclude name="servlet-api.jar" />
			</fileset>
		</copy>

		<copy file="${webapp.dir}/context.xml" tofile="${build.war.dir}/META-INF/context.xml" />
	</target>

	<!-- ================================= 
          target: deploy              
         ================================= -->
	<target name="deploy" depends="copyEtc" description="Deploy to Tomcat">
		<property name="webapp.deploy.home" value="${tomcat.home}/webapps/${webapp.name}" />

		<mkdir dir="${webapp.deploy.home}" />

		<copy todir="${webapp.deploy.home}">
			<fileset dir="${build.war.dir}" />
		</copy>
	</target>

</project>
