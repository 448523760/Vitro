# Log4J Levels
# Loggers may be assigned levels. The set of possible levels, that is DEBUG, INFO, WARN, ERROR and FATAL are defined in the org.apache.log4j.Level class.
# If a given logger is not assigned a level, then it inherits one from its closest ancestor with an assigned level.
# The root logger resides at the top of the logger hierarchy. It always exists and always has an assigned level.

# The logger is the core component of the logging process. In log4j, there are 5 normal levels Levels of logger available (not including custom Levels), the following is borrowed from the log4j API (http://jakarta.apache.org/log4j/docs/api/index.html):
# static Level DEBUG - The DEBUG Level designates fine-grained informational events that are most useful to debug an application.
# static Level INFO - The INFO level designates informational messages that highlight the progress of the application at coarse-grained level.
# static Level WARN - The WARN level designates potentially harmful situations.
# static Level ERROR - The ERROR level designates error events that might still allow the application to continue running.
# static Level FATAL - The FATAL level designates very severe error events that will presumably lead the application to abort.

# In addition, there are two special levels of logging available: (descriptions borrowed from the log4j API http://jakarta.apache.org/log4j/docs/api/index.html):
# static Level ALL -The ALL Level has the lowest possible rank and is intended to turn on all logging.
# static Level OFF - The OFF Level has the highest possible rank and is intended to turn off logging.

# Set root logger level to DEBUG and its only appender to A1.
log4j.rootLogger=INFO, A1

# A1 is set to be a ConsoleAppender.
log4j.appender.A1=org.apache.log4j.ConsoleAppender

# A1 uses PatternLayout.
log4j.appender.A1.layout=org.apache.log4j.PatternLayout
log4j.appender.A1.layout.ConversionPattern=%-4r [%t] %-5p %c %x - %m%n

#log4j.logger.edu.cornell.mannlib.vitro.db.dao.Tabs2EntsDao=DEBUG
#log4j.logger.edu.cornell.mannlib.vitro.db.dao.EntityDao=DEBUG
# log4j.logger.edu.cornell.mannlib.vitro.db=DEBUG
#log4j.logger.edu.cornell.mannlib.vitro.db.dao.Ents2EntsDao=DEBUG

#log4j.logger.edu.cornell.mannlib.ingest=DEBUG
#log4j.logger.edu.cornell.mannlib.ingest.fieldHandlers.BasicEntityHandler=DEBUG
#log4j.logger.edu.cornell.mannlib.ingest.fieldHandlers.TabRelationMaker=DEBUG
#log4j.logger.edu.cornell.mannlib.ingest.fieldHandlers.EntityResolver=DEBUG
#log4j.logger.edu.cornell.mannlib.ingest.fieldHandlers.RelationResolver=DEBUG
#log4j.logger.edu.cornell.mannlib.ingest.tests.WosAuthorMatchTest=TRACE
log4j.logger.edu.cornell.mannlib=DEBUG
#log4j.logger.edu.cornell.mannlib.vitro.db.dao.NameMatch=DEBUG
#log4j.logger.edu.cornell.mannlib.ingest.actions.WosPublisherMaker=TRACE
#log4j.logger.edu.cornell.mannlib.ingest.fieldHandlers.CreateAndSaveEntityHandler=DEBUG
#log4j.logger.edu.cornell.mannlib.ingest.fieldHandlers.DataPropertyHandler=DEBUG
#log4j.logger.edu.cornell.mannlib.ingest.fieldHandlers.KeywordHandler=DEBUG

#log4j.logger.edu.cornell.mannlib.ingest.processors.RegexMapper=DEBUG

#log4j.logger.edu.cornell.mannlib.ingest.parser.IngestSaxParser=DEBUG


