<?xml version="1.0"?>
<!-- CVSID $Id: build.xml,v 1.2 2002/04/16 13:36:14 fereira Exp $ -->
<project name="osp" default="compile" basedir=".">
	<!-- Load user property definition overrides -->
	<property file="build.properties"/>
	<!-- Property Definitions -->
	<property name="app.name" value="(set app.name in build.properties)"/>
	<property name="deploy.home" value="(set deploy.home in build.properties)"/>
	<property name="dist.home" value="./dist"/>
	<property name="build.home" value="./build"/>
	<property name="src.home" value="./src"/>
	<property name="lib.home" value="./lib"/>
	<property name="javadoc.home" value="${dist.home}/javadoc"/>

	<property name="run.class" value="(set run.class in build.property)"/>
	<property name="run.args" value="(set run.args in build.property)"/>
	
    <property name="java_api" value="/usr/local/java/java_home"/>
	<property name="run.java" value="/usr/bin/java"/>

	<property name="compile.debug" value="true"/>

	<!--====================  external dependancies ==================== -->
    <!-- notice that this is the Vitro/build dir -->
	<property name="vitro.classes" value="../../../../webapp/build/WEB-INF/classes" /> 
	<property name="vitro.lib" value="../../../webapp/lib"/>
	<!-- ==================== Compilation Classpath =========================== -->

 	<path id="compile.classpath">
	    <!--everything in the properties lib.home dir -->
		<fileset dir="${lib.home}">
		  <include name="**/*.jar"/>
		</fileset>
 		<pathelement path="${vitro.classes}"/>
        <fileset dir="${vitro.lib}">
          <include name="**/*.jar"/>
        </fileset>
	</path>

	<!-- ==================== Runtime Classpath =========================== -->

	<path id="run.classpath">
	    <!--everything in the properties lib.home dir -->
		<fileset dir="${lib.home}">
		  <include name="**/*.jar"/>
		</fileset>
		<!-- build dir -->
		<pathelement path="${build.home}"/>
 		<pathelement path="${vitro.classes}"/>
        <fileset dir="${vitro.lib}">
          <include name="**/*.jar"/>
        </fileset>
	</path>

	<!-- ==================== Prepare Target ================================== -->
	<!--  The "prepare" target is used to create the "build" destination directory,
		 and copy the static contents of your web application to it.  If you need
		 to copy static files from external dependencies, you can customize the
		 contents of this task.
		 Normally, this task is executed indirectly when needed. -->
	<target name="prepare">
		<!-- Create directorys  -->
		<mkdir dir="${build.home}"/>
		<mkdir dir="${lib.home}"/>
		<mkdir dir="${src.home}"/>
		<mkdir dir="${dist.home}"/>
	</target>


	<!-- ==================== All Target ====================================== -->
	<!--  The "all" target is a shortcut for running the "clean" target followed
		 by the "compile" target, to force a complete recompile. -->
	<target name="all" depends="clean,compile" description="Clean build and dist, then compile"/>

	<!-- ==================== Clean Target ==================================== -->
	<!--  The "clean" target deletes any previous "build" and "dist" directory,
		 so that you can be ensured the application can be built from scratch. -->
	<target name="clean" description="Delete old build and dist directories">
	  <delete dir="${build.home}"/>
	  <delete dir="${dist.home}"/>
	</target>
	
	<!-- ==================== Compile Target ================================== -->
	<!--  The "compile" target transforms source files (from your "src" directory)
          into object files in the appropriate location in the build directory.
          This example assumes that you will be including your classes in an
          unpacked directory hierarchy under "/WEB-INF/classes". -->

	<target name="compile" depends="prepare" description="Compile Java sources">
	  <javac srcdir="${src.home}" destdir="${build.home}" debug="${compile.debug}" 
			 deprecation="${compile.deprecation}" optimize="${compile.optimize}"
			 fork="true">
		<classpath refid="compile.classpath"/>
	  </javac>
	</target>

	<!-- ==================== Deploy Target =================================== -->
	<!--  The "deploy" target copies the contents of the build directory into a
		 location required by our servlet container, and picks up any external
		 dependencies along the way.  After restarting the servlet container, you
		 can now test your web application. -->

	<target name="deploy" depends="compile" description="Deploy application to servlet container">
		<!-- Copy the contents of the build directory -->
		<mkdir dir="${deploy.home}"/>
		<copy todir="${deploy.home}">
			<fileset dir="${build.home}"/>
		</copy>
		<!-- Copy external dependencies as required -->
<!-- 		<mkdir dir="${deploy.home}/WEB-INF/lib"/> -->
<!-- 		<copy todir="${deploy.home}/WEB-INF/lib" file="${mysql.jar}" /> -->
<!-- 		<copy todir="${deploy.home}/WEB-INF/lib" file="${oracle.jar}" /> -->
		<!--copy todir="${deploy.home}/WEB-INF/lib" file="${xmlrpc.jar}"/-->
<!-- 		<copy todir="${deploy.home}/WEB-INF/lib" file="${activation.jar}" /> -->
<!-- 		<copy todir="${deploy.home}/WEB-INF/lib" file="${mail.jar}" /> -->
	</target>

	<!-- ==================== Dist Target ===================================== -->
	<!--The "dist" target creates a binary distribution of your application
		in a directory structure ready to be archived in a tar.gz or zip file.
		Note that this target depends on two others:
		* "deploy" so that the entire web application (including external
		  dependencies) will have been assembled
		* "javadoc" so that the application Javadocs will have been created 	-->

	<target name="dist" depends="deploy" description="Create binary distribution">
		<!-- Copy documentation subdirectory -->
		<copy todir="${dist.home}/docs" failonerror="false">
			<fileset dir="docs"/>
		</copy>
		<!-- Create application JAR file -->
		<jar jarfile="${dist.home}/${app.name}.jar" basedir="${deploy.home}"/>
	</target>

	<!-- ==================== Javadoc Target ================================== -->
	<!--  The "javadoc" target creates Javadoc API documentation for the Java
		 classes included in your application.  Normally, this is only required
		 when preparing a distribution release, but is available as a separate
		 target in case the developer wants to create Javadocs independently. -->
	<target name="javadoc" depends="compile" description="Create Javadoc API documentation">
		<mkdir dir="${dist.home}/docs"/>
		<javadoc sourcepath="src" classpathref="compile.classpath" 
				 destdir="${dist.home}/docs" packagenames="*"/>
	</target>
    
	<!-- ==================== Run Target ================================== -->
    <!-- This is to run a java command with the classpath that the project was built with. -->
    <!-- example of usage: -->
    <!-- ant run -Drun.class="edu.cornell.MyClass" -Drun.args="-l -p -f=myarg.txt"  -->

	<target name="run" depends="compile">
	    <java  fork="true" args="${run.args}" classname ="${run.class}"
			   jvm="${run.java}">
			<classpath refid="run.classpath"/>
        </java>
	</target>


	<!-- =================== Make Run Script ========================= -->
	<target name="makeRunScript" depends="compile"
			description="Create a script for executing main() methods with 
						 prescribed jdk and classpath">
	  <property name="MakeRunShPath" refid="run.classpath"/>
	  <echo file="run.sh" append="false">
		#!/bin/bash
		${run.java} -Xmx128m -cp "${MakeRunShPath}" $$*
	  </echo>
	</target>


</project>
