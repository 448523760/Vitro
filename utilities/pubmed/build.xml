<?xml version="1.0"?>
<!-- CVSID $Id: build.xml,v 1.1 2005/10/06 14:11:10 bdc34 Exp $ -->
<project name="pubmed" default="compile" basedir=".">
	<!-- Load user property definition overrides -->
	<property file="build.properties"/>
	<!-- Property Definitions -->
    <property name="app.name" value="pubmed"/>
    <property name="app.version" value="0.1"/>

    <!-- Set up 'env' as the prefix for environmental variables -->
    <property environment="env"/>
    <property name="java_api" value="${env.JAVA_HOME}" />

    <property name="pubmed.build" value="../pubmed/build"/>
    <property name="pubmed.lib" value="../pubmed/lib"/>

    <property name="vivo.build" value="../../../build/WEB-INF/classes"/>
	<property name="vivo.lib" value="../../lib"/><!-- notice that this is the Vitro/dream/lib dir -->

    <property name="biosis.build" value="../biosis/build"/>
    <property name="biosis.lib" value="../biosis/lib"/>

	<property name="dist.home" value="./dist"/>
	<property name="build.home" value="./build"/>
	<property name="src.home" value="./src"/>


	<property name="run.java" value="${java_api}/bin/java"/>
    <property name="run.class" value="PMParser"/>
    <property name="run.args" value=" --test pubmed.properties xml/pubmed.7articles.xml "/>
    <property name="run.sh" value="run.sh"/>

    <!-- ==================== Compilation Control Options =====================	-->
	<property name="compile.javac" value="${java_api}/bin/javac"/>
    <property name="compile.debug" value="true"/>
    <property name="compile.deprecation" value="true"/>
    <property name="compile.optimize" value="true"/>
    <!-- magic property for <javac> see Tilly J., Burke E., "Ant" 2002 pg 53-->
    <property name="build.compiler" value="modern"/>
	
	<!-- ==================== pubmed Classpath =========================== -->
 	<path id="pubmed.classpath">
        <!-- pubmed classes -->
		<fileset dir="${pubmed.lib}">
		  <include name="**/*.jar"/>
		</fileset>
        <!-- main pubmed classes -->
		<pathelement path="${pubmed.build}"/>
        
        <!-- main biosis classes -->
		<fileset dir="${biosis.lib}">
		  <include name="**/*.jar"/>
		</fileset>
        <pathelement path="${biosis.build}"/>

	    <!--everything in the vivo lib home dir -->
		<fileset dir="${vivo.lib}">
		  <include name="**/*.jar"/>
		</fileset>
        <!-- main vivo classes -->
		<pathelement path="${vivo.build}"/>
	</path>

    <!-- ==================== Get Enviroment Variables ==================== -->
    <target name="checkEnv" 
            description="Checks that envornmental variables such as JAVA_HOME are set">

      <!-- Abort if environmental variables are not set -->
      <fail unless="env.JAVA_HOME">      
        You must set the enviroment variable JAVA_HOME to something 
        like /usr/local/lib/java/jdk1.4.2 and it should have no jar files in 
        jdk1.4.2/jre/lib/ext.
      </fail>
    </target>

	<!-- ==================== Prepare Target ================================== -->
	<!--
  The "prepare" target is used to create the "build" destination directory,
  and copy the static contents of your web application to it.  If you need
  to copy static files from external dependencies, you can customize the
  contents of this task.

  Normally, this task is executed indirectly when needed. -->
	<target name="prepare">
		<!-- Create directorys  -->
		<mkdir dir="${build.home}"/>
	</target>

	<!-- ==================== All Target ====================================== -->
	<!--   The "all" target is a shortcut for running the "clean" target followed
		 by the "compile" target, to force a complete recompile. -->
	<target name="all" depends="clean,compile" description="Clean build and dist, then compile"/>

	<!-- ==================== Clean Target ==================================== -->
	<!--  The "clean" target deletes any previous "build" and "dist" directory,
		 so that you can be ensured the application can be built from scratch. -->
	<target name="clean" description="Delete old build and dist directories">
		<delete dir="${build.home}"/>
		<delete dir="${dist.home}"/>
        <delete file="${run.sh}"/>
	</target>

	<!-- ==================== Compile Target ================================== -->
	<!--  The "compile" target transforms source files (from your "src" directory)
          into object files in the appropriate location in the build directory.
          This example assumes that you will be including your classes in an
          unpacked directory hierarchy under "/WEB-INF/classes". -->
	<target name="compile" depends="checkEnv,prepare" description="Compile Java sources">
	  <javac srcdir="${src.home}" destdir="${build.home}" debug="${compile.debug}" 
			 deprecation="${compile.deprecation}" optimize="${compile.optimize}"
			 executable="${compile.javac}">
		<classpath refid="pubmed.classpath"/>
	  </javac>
	</target>

    
	<!-- ==================== Run Target ================================== -->
    <!-- This is to run a java command with the classpath that the project was built with. -->
    <!-- example of usage: -->
    <!-- ant run -Drun.class="edu.cornell.MyClass" -Drun.args="-l -p -f=myarg.txt"  -->

	<target name="run" depends="compile">
	    <java  fork="true" args="${run.args}" classname ="${run.class}"
			   jvm="${run.java}">
			<classpath refid="pubmed.classpath"/>
        </java>
	</target>

	<!-- =================== Make Run Script ========================= -->
	<target name="makeRunScript" depends="compile"
			description="Create a script for executing main() methods with 
						 prescribed jdk and classpath">
	  <property name="MakeRunShPath" refid="pubmed.classpath"/>
	  <echo file="${run.sh}" append="false">
		#!/bin/bash
        # This script will run the main() method of the class indicated as the first argument and
        # pass the other arguments to that main() method.  
        # The script was generated by the ant target makeRunScript.
		${java_api}/jre/bin/java -cp "${MakeRunShPath}" $$*
	  </echo>
      <chmod file="${run.sh}" perm="755"/>
	</target>

</project>
